use reqwest::Url;
use std::collections::HashMap;

pub fn generate_fields(model: &str) -> Vec<String> {
    let model = model.to_lowercase();

    let fields_map: HashMap<&str, &[&str]> = HashMap::from([
        (
            "user",
            [
                "background",
                "roles",
                "points",
                "ban_info",
                "gender",
                "created_at",
                "about",
                "teams",
                "premium_background_id",
            ]
            .as_slice(),
        ),
        (
            "manga",
            [
                "background",
                "eng_name",
                "otherNames",
                "summary",
                "releaseDate",
                "type_id",
                "caution",
                "views",
                "close_view",
                "rate_avg",
                "rate",
                "genres",
                "tags",
                "teams",
                "user",
                "franchise",
                "authors",
                "publisher",
                "userRating",
                "moderated",
                "metadata",
                "metadata.count",
                "metadata.close_comments",
                "manga_status_id",
                "chap_count",
                "status_id",
                "artists",
                "format",
            ]
            .as_slice(),
        ),
        (
            "ranobe",
            [
                "background",
                "eng_name",
                "otherNames",
                "summary",
                "releaseDate",
                "type_id",
                "caution",
                "views",
                "close_view",
                "rate_avg",
                "rate",
                "genres",
                "tags",
                "teams",
                "user",
                "franchise",
                "authors",
                "publisher",
                "userRating",
                "moderated",
                "metadata",
                "metadata.count",
                "metadata.close_comments",
                "manga_status_id",
                "chap_count",
                "status_id",
                "artists",
                "format",
            ]
            .as_slice(),
        ),
        (
            "hentai",
            [
                "background",
                "eng_name",
                "otherNames",
                "summary",
                "releaseDate",
                "type_id",
                "caution",
                "views",
                "close_view",
                "rate_avg",
                "rate",
                "genres",
                "tags",
                "teams",
                "user",
                "franchise",
                "authors",
                "publisher",
                "userRating",
                "moderated",
                "metadata",
                "metadata.count",
                "metadata.close_comments",
                "manga_status_id",
                "chap_count",
                "status_id",
                "artists",
                "format",
            ]
            .as_slice(),
        ),
        (
            "anime",
            [
                "background",
                "eng_name",
                "otherNames",
                "summary",
                "releaseDate",
                "type_id",
                "caution",
                "views",
                "close_view",
                "rate_avg",
                "rate",
                "genres",
                "tags",
                "teams",
                "user",
                "franchise",
                "authors",
                "publisher",
                "userRating",
                "moderated",
                "metadata",
                "metadata.count",
                "metadata.close_comments",
                "anime_status_id",
                "time",
                "episodes",
                "episodes_count",
                "episodesSchedule",
                "shiki_rate",
            ]
            .as_slice(),
        ),
    ]);

    fields_map
        .get(model.as_str())
        .map(|fields| fields.iter().map(|&s| s.to_string()).collect())
        .unwrap_or_default()
}

// ! Подготавливает наши филдсы.
// ! Вектор, то есть список, перерабатывает в обычный стиль для урла.
// ! DEPRECATED, may be lost in mind.
pub fn make_up_fields(fields: Vec<String>) -> String {
    fields
        .into_iter()
        .map(|field| format!("fields[]={}", urlencoding::encode(&field)))
        .collect::<Vec<_>>()
        .join("&")
}
